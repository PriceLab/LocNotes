library(PrivateCoryData)
data(tbl.gwas.level_1)
print(data(tbl.gwas.level_1))
dim(tbl.gwas.level_1)
dim(tbl.gwas.level_1)
ls()
dim(tbl.gwas)
head(tbl.gwas)
q()
source("~/github/snpFoot/R/displayTracks.R")
source("~/github/snpFoot/R/displayTracks.R")
source("~/github/snpFoot/R/displayTracks.R")
print(data(tbl.gwasADsnpsInFp.05pval.igap2013))
dim(tbl.gwasADsnpsInFp.05pval.igap2013)
dim(tbl.gwasADsnpsInFp)
source("~/github/snpFoot/R/displayTracks.R")
library(snpFoot)
source("~/github/snpFoot/R/displayTracks.R")
igvR()
library(igvR)
igvR()
dim(tbl.gwasSub)
head(tbl.gwasSub)
c
c
q()
source("~/github/snpFoot/R/displayTracks.R")
source("test_snpFoot.R")
source("~/github/snpFoot/R/displayTracks.R")
c
library(igvR)
c
clear(igv)
clearAllTracks(igv)
clearAllTracks(igv)
args(igvR)
t(tbl.fpAnnotated[1,])
n
dim(tbl.fpSub)
head(tbl.sub)
head(tbl.fpSub)
head(tbl.gwasSub)
Q
q()
library(igvR)
?displayGWASTable
source("test_snpFoot.R")
?displayGWASTable
head(tbl.fpSub.gwas)
Q
q()
source("test_snpFoot.R")
q()
source("test_snpFoot.R")
q()
source("test_snpFoot.R")
t(tbl.fpSub[1,])
fivenum(tbl.fpSub$fpScore)
displayScoredFeatures(igv, tbl.features)
displayScoredFeatures(igv, tbl.features)
colnames(tbl)[1:4]
colnames(tbl.features)[1:4]
Q
q()
source("test_snpFoot.R")
Q
q()
source("test_snpFoot.R")
n
n
n
dim(tbl.features)
n
Q
q()
source("test_snpFoot.R")
test_snpFootDisplay()
n
n
n
dim(tbl.features)
head(tbl.features)
colnames(tbl.features)[1:4] == c("chrom", "start", "end", "score"))
colnames(tbl.features)[1:4] == c("chrom", "start", "end", "score")
colnames(tbl.features)[1:4] == c("chrom", "start", "end", "score")
stopifnot(colnames(tbl)[1:4] == c("chrom", "start", "end", "score"))
stopifnot(colnames(tbl.features)[1:4] == c("chrom", "start", "end", "score"))
tbl <- tbl.features
name
Q
q()
source("test_snpFoot.R"); test_snpFootDisplay()
n
n
Q
q()
source("test_snpFoot.R"); test_snpFootDisplay()
n
n
n
c
tempFile
c
tbl <- read.table("/var/folders/qw/f4r8_r9513548zsbzxv17wg40000gp/T/RtmpUmpSjW/footprints.igv", sep="\t", as.is=TRUE, header=FALSE)
head(tbl)
colnames(tbl) <- c("chr", "start", "end", "score")
count <- 8
feature.names
length(score)
tbl
tbl
write.table(tbl, file="~/Desktop/stage/tmp.igv", row.names=FALSE, col.names=TRUE, quote=FALSE, sep="\t")
   tbl <- data.frame(chr=chr, start=start, end=end, featureName=feature.names, test_fp=score)

write.table(tbl, file="~/Desktop/stage/tmp.igv", row.names=FALSE, col.names=TRUE, quote=FALSE, sep="\t")
score
score[1:count]
as.integer(runif(8, 1, 100))
tbl
write.table(tbl, file="~/Desktop/stage/tmp.igv", row.names=FALSE, col.names=TRUE, quote=FALSE, sep="\t")
clearAllTracks(igv)
c
tempfile()
tempfile("igv")
args(tempfile)
tempfile(filext="igv")
tempfile(fileext="igv")
tempfile(fileext=".igv")
tbl
write.table(tbl, file="~/Desktop/stage/tmp.igv", row.names=FALSE, col.names=TRUE, quote=FALSE, sep="\t")
q()
source("../../../igvR/inst/unitTests/test_igvR.R")
clearAllTracks(igv)
c
runTests()
c
clearAllTracks(igv)
c
head(tbl)
Q
q()
source("../../../igvR/inst/unitTests/test_igvR.R")
test_displayScoredFeatures()
head(tbl)
c
q()
source("../../../igvR/inst/unitTests/test_igvR.R")
test_displayScoredFeatures()
head(tbl)
c
q()
source("../../../igvR/inst/unitTests/test_igvR.R"); runTests()
source("../../../igvR/inst/unitTests/test_igvR.R"); runTests()
clearAllTracks(igv)
source("test_snpFoot.R")
n
as.data.frame(t(tbl.fpSub[,1]))
as.data.frame(t(tbl.fpSub[1,]))
head(tbl.features)
Q
q()
source("../../../igvR/inst/unitTests/test_igvR.R"); 
test_displayScoredFeatures()
source("test_snpFoot.R")
n
n
n
head(tbl.features)
Q
q()
source("test_snpFoot.R")
n
n
head(tbl.features)
n
c
clearAllTracks(igv)
n
head(tbl.features)
tbl <- tbl.features
tbl <- tbl.features
head(tbl)
tempFile
write.table(tbl, file="~/Desktop/stage/tmp2.igv", row.names=FALSE, col.names=TRUE, quote=FALSE, sep="\t")
order(tbl$start)
head(order(tbl$start))
tbl <- tbl[order(tbl$start),]
head(tbl)
displayScoredFeatures(igv, tbl)
write.table(tbl, file="~/Desktop/stage/tmp3.igv", row.names=FALSE, col.names=TRUE, quote=FALSE, sep="\t")
displayScoredFeatures(igv, tbl)
Q()
Q
q()
source("test_snpFoot.R")
test_snpFootDisplay()
source("test_snpFoot.R")
n
n
n
c
q()
source("test_snpFoot.R")
test_snpFootDisplay()
dim(tbl)
dim(tbl.features)
head(tbl.features
)
tbl <- tbl.features
tempFile
system("ls()")
system("ls")
system("cp /var/folders/qw/f4r8_r9513548zsbzxv17wg40000gp/T//RtmplHBtpP/filec8801daba8b.igv ~/Desktop/stage")
system("cp /var/folders/qw/f4r8_r9513548zsbzxv17wg40000gp/T/RtmplHBtpP/filec8801daba8b.igv ~/Desktop/stage")
system("cp /var/folders/qw/f4r8_r9513548zsbzxv17wg40000gp/T/RtmplHBtpP/filec8801daba8b.igv ~/Desktop/stage")
Q
q()
source("test_snpFoot.R")
test_snpFootDisplay()
order(tbl.features$start[1:150])
c
q()
source("test_snpFoot.R")
clearAllTracks(igv)
n
fivenum(tbl.features$footprints)
Q
snpFootDisplay <- function (chrom, start, end, snp.locs, tfs, genome)
{
  stopifnot(genome %in% c("hg38", "hg19", "hg18"))   # might get more flexible later

  if(!exists("igv"))
    igv <<- igvR(genome=genome)

  stopifnot(connected(igv))

  tbl.fpSub <- subset(tbl.fpAnnotated,  chr==chrom & mfpStart >= start & mfpEnd <= end)
  tbl.features <- tbl.fpSub[, c("chr", "mfpStart", "mfpEnd", "name", "fpScore")]
  colnames(tbl.features) <- c("chr", "start", "end", "featureName", "footprints")
  tbl.features$footprints <- abs(tbl.features$footprints)
  displayScoredFeatures(igv, tbl.features, quiet=FALSE)

  browser()
  displayBedTable(igv, tbl.fpSub, "cory's footprints")
  #tbl.gwasSub <- subset(tbl.gwas, CHR==chrom & BP >= start & BP <= end)

  #displayGWASTable(igv, tbl.gwasSub, "IGAP all SNPs")

} # snpFootDisplay

as.data.frame(t(tbl.fpSub[1,]))
head(tbl.fpSub[, c("chr", "mfpStart", "mfpEnd", "name")])
displayBedTable(igv, tbl.fpSub[, c("chr", "mfpStart", "mfpEnd", "name")], "cory's footprints")
data(tbl.gwas.level_1)
dim(tbl.gwas)
fivenum(tbl.features$scoredFootprints)
fivenum(tbl.features$scoredFootprints)
clearAllTracks(igv)
Q
q()
args(data)
q()
source("test_snpFoot.R")
source("test_snpFoot.R")
test_snpFootDisplay()
c
connected(igv)
connected(igv)
igv <- igvR()
connected(igv)
test_snpFootDisplay()
q()
igv2 <- igv(port=61000)
igv2 <- igvR(port=61000)
source("test_snpFoot.R")
igv <- igvR(port=61000)
connected(igv)
test_snpFootDisplay()
q()
source("test_snpFoot.R")
igv
k
source("test_snpFoot.R")
q()
source("test_snpFoot.R")
q()
system("R CMD install ../..')
system("R CMD install ../..")
data(tbl.fpAnnotated)
library(PrivateCoryData)
data(tbl.fpAnnotated)
head(tbl.fpAnnotated)
colnames(tbl.fpAnnotated)
colnames(tbl.fpAnnotated)[6] <- "motifName"
colnames(tbl.fpAnnotated)
save(tbl.fpAnnotated, file="~/github/Private_Cory_Data/data/tbl.fpAnnotated.RData")
q()
source("test_snpFoot.R")
runTests()
q()
source("test_snpFoot.R")
runTests()
source("test_snpFoot.R"); runTests()
dim(tbl)
loc
loc
Q
source("test_snpFoot.R"); runTests()
c
source("test_snpFoot.R"); test_findSNPsInFootprints()
tfs
length(tfs.all)
n
traceback()
q()
source("test_snpFoot.R"); runTests)(
source("test_snpFoot.R"); runTests()
source("test_snpFoot.R"); runTests()
q()
source("test_snpFoot.R")
source("test_snpFoot.R")
var.names
var.name.trn.rtrim
dim(trn.rtrim)
genes.of.interest
names(x)
dim(x$bed4igv)
source("test_snpFoot.R")
test_tfGrabber()
source("test_snpFoot.R"); runTests()
q()
source("test_snpFoot.R"); runTests()
q()
source("test_snpFoot.R"); test_tfGrabber()
q()
options(error=recover)
source("test_snpFoot.R"); test_tfGrabber()
names(x)
clsas(x$TRN)
class(x$TRN)
head(x$TRN)
length(x$TRN)
x$bed4igv
Q
q()
source("test_snpFoot.R"); test_tfGrabber()
q()
source("test_snpFoot.R"); test_tfGrabber()
length(x$TRN)
length(x$TRN) == length(genes.of.interest)
c
source("test_snpFoot.R"); test_tfGrabber()
source("test_snpFoot.R"); test_tfGrabber()
source("test_snpFoot.R"); test_tfGrabber()
test_tfGrabber.fullTRN()
test_tfGrabber.fullTRN()
q()
source("test_snpFoot.R"); test_tfGrabber(); test_tfGrabber.fullTRN()
q()
source("test_snpFoot.R"); test_tfGrabber(); test_tfGrabber.fullTRN()
length(keepCols)
keepCols
class(singleTRN)
head(singleTRN)
length(singleTRN)
Q
q()
source("test_snpFoot.R"); test_tfGrabber(); test_tfGrabber.fullTRN()
n
n
n
n
Q
q()
source("test_snpFoot.R"); test_tfGrabber(); test_tfGrabber.fullTRN()
q()
source("test_snpFoot.R"); test_tfGrabber(); test_tfGrabber.fullTRN()
source("test_snpFoot.R"); runTests()
source("test_snpFoot.R"); test_tfGrabber()
source("test_snpFoot.R"); test_tfGrabber()
runTests
connected(igv)
library(igv)
igv <- igvR()
connected(igv)
displayADgwas(igv, "xx")
intersectingLocs(tbl.bed, chrom, loc.bad)
checkEquals(intersectingLocs(tbl.bed, chrom, loc.bad), numeric(0))
load(isb_all_cer.1000000-dist.44-genes.results.bed)
sessionInfo()
data(isb_AD.1000000-dist.44-genes.results.bed)
q()
source("test_snpFoot.R"); 
load(44genes_10trns_bedTable)
q()
source("test_snpFoot.R"); 
load(genes44_trns10_bedTable)
data(genes44_trns10_bedTable)
print(data(genes44_trns10_bedTable))
dim(genes44_trns10_bedTable)
data(gtex.1000000-dist.44-genes.results.bed)
print(load("/Users/paul/github/Private_Cory_Data/data/gtex.1000000-dist.44-genes.results.bed.RData"))
head(tbl.out)
?data
)
q()
source("test_snpFoot.R"); 
source("test_snpFoot.R"); 
system.file(package="PrivateCoryData", "extdata", "trn10.genes44")
system.file(package="PrivateCoryData", "extdata")
list.files(system.file(package="PrivateCoryData", "extdata"))
q()
source("test_snpFoot.R"); 
head(tbl.out)
displayBedTable(igv, tbl.out, "isb_all")
args(displayGWASTable)
q()
source("test_snpFoot.R"); 
system.file(package="PrivateCoryData", "extdata")
list.files(system.file(package="PrivateCoryData", "extdata"))
tbl.mariette <- read.table(file, sep="\t", header=TRUE, as.is=TRUE)
head(tbl.mariette)
print(load(file))
dim(tbl.out)
head(tbl.gwas)
length(subset(tbl.fwas, CHR=="chr5")$BP)
length(subset(tbl.gwas, CHR=="chr5")$BP)
gwas.chr5.snps.in.fp
gwas.chr5.snps.in.fp
length(mariette.snps.in.or.near.fp)
(mariette.snps.in.or.near.fp)
head(tbl.fpAnnotated)
clearAllTracks(igv)
clearAllTracks(igv)
test_intersectMarietSnpsWithGWAS()
traceback()
source("test_snpFoot.R")
clearAllTracks(igv)
source("test_snpFoot.R"); runTests()
q()
source("test_LocNotes.R"); runTests()
source("test_LocNotes.R"); runTests()
q()
source("test_LocNotes.R"); runTests()
q()
source("test_LocNotes.R"); runTests()
q()
source("test_LocNotes.R"); runTests()
q()
source("test_LocNotes.R"); runTests()
source("test_LocNotes.R"); runTests()
q()
source("test_LocNotes.R"); runTests()
source("test_LocNotes.R"); runTests()
source("test_LocNotes.R"); runTests()
test_getLocation()
q()
